/* Credit: https://kittygiraudel.com/2021/04/05/an-accessible-toggle/ */

.toggle {
  display: inline-flex;
  align-items: center;
  flex-wrap: wrap;
  position: relative;
  gap: 1rem;
  min-height: 44px;

  --toggle-color-primary: #222222;
  --toggle-color-secondary: #ffffff;
}

/**
 * 1. Vertically center the icons and space them evenly in the available
 *    horizontal space, essentially giving something like: [ ✔ ✗ ]
 * 2. Size the display according to the size of the handle. `box-sizing`
 *    could use `border-box` but the border would have to be considered
 *    in the `width` computation. Either way works.
 * 3. For the toggle to be visible in Windows High-Contrast Mode, we apply a
 *    thin semi-transparent (or fully transparent) border.
 *    Kind thanks to Adrian Roselli for the tip:
 *    https://twitter.com/aardrian/status/1379786724222631938?s=20
 * 4. Grant a position context for the pseudo-element making the handle.
 * 5. Give a pill-like shape with rounded corners, regardless of the size.
 * 6. The default state is considered unchecked, hence why this pale red is
 *    used as a background color.
 */
.toggle-display {
  --offset: 0.5rem;
  --diameter: 1rem;

  display: inline-flex;
  align-items: center;
  justify-content: space-around;

  width: calc(var(--diameter) * 2 + var(--offset) * 2);
  height: calc(var(--diameter) + var(--offset));
  box-sizing: content-box;

  border: 0.125rem solid var(--toggle-color-primary);

  position: relative;
  border-radius: 100vw;
  background-color: var(--toggle-color-secondary);

  transition: 250ms;
  cursor: pointer;
}

/**
 * 1. Size the round handle according to the diameter custom property.
 * 2. For the handle to be visible in Windows High-Contrast Mode, we apply a
 *    thin semi-transparent (or fully transparent) border.
 *    Kind thanks to Adrian Roselli for the tip:
 *    https://twitter.com/aardrian/status/1379786724222631938?s=20
 * 3. Absolutely position the handle on top of the icons, vertically centered
 *    within the container and offset by the spacing amount on the left.
 * 4. Give the handle a solid background to hide the icon underneath. This
 *    could be dark in a dark mode theme, as long as it’s solid.
 */
.toggle-display::before {
  content: '';

  inline-size: var(--diameter);
  block-size: var(--diameter);
  border-radius: 50%;

  box-sizing: border-box;
  border: 0.1 solid rgba(0, 0, 0, 0);

  position: absolute;
  z-index: 2;
  inset-block-start: 50%;
  inset-inline-start: var(--offset);
  transform: translate(-25%, -50%);

  background-color: var(--toggle-color-primary);
  transition: inherit;
}

@media (prefers-reduced-motion: reduce) {
  .toggle-display {
    transition-duration: 0ms;
  }
}

.toggle-checkbox {
  position: absolute;
  opacity: 0;
  inline-size: 100%;
  block-size: 100%;
}
/**
 * 1. When the input is focused, provide the display the default outline
 *    styles from the browser to mimic a native control. This can be
 *    customised to have a custom focus outline.
 */
.toggle-checkbox:focus + .toggle-display {
  outline: 0.125rem dotted var(--toggle-color-primary);
  outline-offset: 0.25rem;
}

/**
 * 1. When the toggle is interacted with with a mouse click (and therefore
 *    the focus does not have to be ‘visible’ as per browsers heuristics),
 *    remove the focus outline. This is the native checkbox’s behaviour where
 *    the focus is not visible when clicking it.
 */
.toggle-checkbox:focus:not(:focus-visible) + .toggle-display {
  outline: 0;
}

/**
 * 1. When the input is checked, change the display background.
 */
.toggle-checkbox:checked + .toggle-display {
  background-color: var(--toggle-color-primary);
}

/**
 * 1. When the input is checked, slide the handle to the right so it covers
 *    the cross icon instead of the checkmark one.
 */
.toggle-checkbox:checked + .toggle-display::before {
  transform: translate(125%, -50%);
  background-color: var(--toggle-color-secondary);
}

/**
 * 1. When the input is disabled, tweak the toggle styles so it looks dimmed
 *    with less sharp colors, softer opacity and a relevant cursor.
 */
.toggle-checkbox:disabled + .toggle-display {
  opacity: 0.6;
  filter: grayscale(40%);
  cursor: not-allowed;
}

.toggle-icon {
  display: inline-block;
  inline-size: 0.75rem;
  block-size: 0.75rem;
  color: inherit;
  fill: currentcolor;
  vertical-align: middle;
}

/**
 * 1. The cross looks visually bigger than the checkmark so we adjust its
 *    size. This might not be needed depending on the icons.
 */
.toggle-icon--cross {
  color: var(--toggle-color-primary);
}

.toggle-icon--checkmark {
  color: var(--toggle-color-secondary);
}

/**
 * 1. Flip the original position of the unchecked toggle in RTL.
 */
[dir='rtl'] .Toggle__display::before {
  left: auto;
  right: var(--offset);
}

/**
 * 1. Move the handle in the correct direction in RTL.
 */
[dir='rtl'] .Toggle__input:checked + .Toggle__display::before {
  transform: translate(-100%, -50%);
}
